yarn add -D mongoose
yarn add -D mongoose-autopopulate
yarn add -D @nestjs/mongoose
yarn add -D @nestjs/config

yarn add class-validator class-transformer
yarn add bcrypt

* Generar módulos:
nest g mo user
* Generar controladores:
nest g co user
* Generar servicio:
nest g s user

nest g mo passenger
nest g co passenger
nest g s passenger

nest g mo flight
nest g co flight
nest g s flight

# ORDEN DE DESARROLLO:

1- Crear por cli module, controller y service
2- Crear manualmente folder dto => module-name.dto.ts
3- Crear la clase module-nameDTO
4- Crear la interface module-name.interface.ts en el folder common/interfaces
5- Crear el folder schema => module-name.schema.ts
6- Exportar el model creado en el folder common/models
7- Modificar el module-name.module.ts para agregar el model en el value imports con la config del orm u odm
   For example in Mongoose:
   imports: [
     MongooseModule.forFeatureAsync([
       {
         name: PASSENGER.name,
         useFactory: () => PassengerSchema,
       },
     ]),
   ],
8- Modificar el constructor del module-name.controller.ts para insertar el module-name.service.ts en el constructor
9- Crear los métodos necesarios en el controller: GET, PUT, POST, DELETE, etc...
10- Inyectar el model del module-name en el module-name.service.ts, junto con su interface 
11- Crear los servicios que son requeridos en module-name.service.ts
12- Si en un controller requires los services de otro module, entonces debes inyectarlos en el constructor del controller
    y también exportar al servicio solicitado desde su module-name.module.ts. For example: revisar passenger.module.ts
13- 

yarn add axios moment
yarn add @nestjs/swagger swagger-ui-express